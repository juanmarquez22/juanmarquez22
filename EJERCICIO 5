import numpy as np

class PilaSecuencial():
    __items=None
    __tope=0
    __cant=0
    
    def __init__(self, xcant):
        self.__items=np.empty(xcant,dtype=int)
        self.__cant=xcant
        self.__tope=-1
        
    def vacia(self):
        return self.__tope == -1
    
    def llena(self):
        return self.__tope == self.__cant-1
     
    def insertar(self,x):
        if(self.__tope < self.__cant-1):
            self.__tope += 1
            self.__items[self.__tope]=x
            return x
        else:
            print("Pila llena")
            
    def suprimir(self):
        if(self.vacia()):
            print("Pila Vacia")
            
        else:
            x = self.__items[self.__tope]
            self.__tope -= 1
            return x
    def mostrar(self):
        if(self.vacia()==False):
            ca=self.__tope +1
            aux=self.__tope
            for i in range(ca):
                print(self.__items[aux])
                aux-=1
        else:
            print('Vacia')
    
    def darUltimo(self):
        return self.__items[self.__tope]


# -*- coding: utf-8 -*-
"""
Ejercicio Nº 5:
Realizar un programa que simule el juego de las torres de Hanoi. 
El juego de las tres torres de Hanoi   consiste en  una configuración de tres pilas numeradas como 1, 2 y 3, con ‘n’ discos de tamaño creciente. Los discos se representarán mediante  enteros. Los discos más grandes utilizarán valores mayores y los discos más pequeños valores menores.
El objetivo del juego es trasladar los discos de la pila 1, a la pila 3, usando la pila 2 como auxiliar. Para realizar este traslado se deben cumplir siempre los siguientes requisitos:
a) Sólo se puede mover una pieza cada vez; y para tomar una segunda pieza se debe dejar  primero la anterior en alguna torre.
b) Sólo puede apilar una pieza encima de una más grande.
Se deberá ingresar el número de discos con el que se va a jugar y mostrar por pantalla el estado inicial del juego (todas las piezas colocadas en la pila 1 y las pilas 2 y 3vacías).
A partir de ahí, pedirá sucesivamente pares de números indicando la pila origen desde la que tomará la pieza y la pila destino a la que se  quiere realizar el movimiento. El programa analizará si la jugada es factible. Si el resultado del análisis es positivo moverá la ficha de una pila a otra. Si no lo es, indicará que es una jugada imposible, indicando el por qué y pedirá un nuevo movimiento.
El juego terminará cuando las pilas 1 y 2 estén vacías y todos los discos se encuentren en la pila 3,  mostrando el número de jugadas realizadas y el número mínimo de jugadas (2n–1) en el que se podría haber realizado.

"""

from PilaSecuencual import PilaSecuencial



if __name__=='__main__':
    print('********TORRES DE HANOI*********')
    print('Bienvenido')
    n = input("Por favor ingrese la cantidad de discos: ")
    n=int(n)
    p1=PilaSecuencial(n)
    p2=PilaSecuencial(n)
    p3=PilaSecuencial(n)
    mov=0
    optimo=2**n-1
    
    for i in range(n):        
        p1.insertar(n-i)
    print('EMPEZAMOS!!!!')
    print('Torre 1:')
    p1.mostrar()
    print('Torre 2:')
    p2.mostrar()
    print('Torre 3:')
    p3.mostrar()
    
    while (p3.llena()==False):
        o=input('Seleccione Torre Origen: (1, 2 o 3)\n')
        o=int(o)        
        if (o==1 and p1.vacia()) or (o==2 and p2.vacia()) or (o==3 and p3.vacia()):
            print('Error: No hay discos para mover!!!!!!!!!!!!!!!!')
        else:
            d=input('Seleccione Torre Destino: (1, 2 o 3)\n')
            d=int(d)
            if(d==1 and p1.llena() or d==2 and p2.llena()):
                print('Error: Torre Llena!!!!!!!!!!!!!!!!!')
            else:                
                if(o==d):
                    print('Error: Se eligio la misma Torre Origen y Destino!!!!!!!!!!!')
                else:
                    if o==1:
                        disco=p1.darUltimo()
                    if o==2:
                        disco=p2.darUltimo()
                    if o==3:
                        disco=p3.darUltimo()
                        
                    if d==1 and disco < p1.darUltimo() or d==1 and p1.vacia(): ##inserta en el destino si el elem nuevo es menor al ultimo elemento
                        if o==2:
                            p2.suprimir()
                            p1.insertar(disco)
                            mov+=1
                        else:
                            if o==3:
                              p3.suprimir()
                              p1.insertar(disco)
                              mov+=1
                    else:
                        if d==2 and disco < p2.darUltimo() or d==2 and p2.vacia():
                            if o==1:
                                p1.suprimir()
                                p2.insertar(disco)
                                mov+=1
                            else:
                                if o==3:
                                  p3.suprimir()
                                  p2.insertar(disco) 
                                  mov+=1
                        else:
                            if d==3 and disco < p3.darUltimo() or d==3 and p3.vacia():
                                if o==1:
                                    p1.suprimir()
                                    p3.insertar(disco)
                                    mov+=1
                                else:
                                    if o==2:
                                      p2.suprimir()
                                      p3.insertar(disco) 
                                      mov+=1
                            else:
                                print('Error: Movimiento no valido!!!!!!!!!!!!!')
        print('\nESTADO ACTUAL:\n')
        print('Torre 1:')
        p1.mostrar()
        print('\nTorre 2:')
        p2.mostrar()
        print('\nTorre 3:')
        p3.mostrar()
        print('*****************************')
        
    print('\n\n***FELICITACIONES JUEGO TERMINADO***')
    print('Usted lo hizo en '+str(mov)+' movimientos')
    print('La cantidad optima de movimientos era '+str(optimo))
